#include<stdio.h>
#include<string.h>
int main()
{
	printf("hehe\n");//stack overflow栈溢出 空间用尽
	main();
	return 0;
}
void print(int n)//直接调用自身函数
{
	if (n > 9)
	{
		print(n / 10);	
	}
	printf("%d ", n % 10);
	
}
int main()
{
	unsigned int num = 0;
	scanf("%d", &num);
	print(num);
	return 0;
}

int my_strlen(char* str)//递归求字符串长度大小
{
	//int count = 0;
	if (*str != '\0')
	
		//count++;
		return 1 + my_strlen(str+1);
	else
	return 0;
}
int main()
{
	char arr[] = "bit";
	int len = my_strlen(arr);
	printf("len=%d\n", len);
	return 0;
}
 
 
int fac1(int n)//求阶乘
{
	int a = 1;
	int i = 0;
	for (i = 1; i <=n; i++)
	{
		a *= i;
	}
	return a;
}
int fac2(int n)
{
	if (n <= 1)
		return 1;
	else
		return n*fac2(n -1);
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = fac2(n);
	printf("%d\n", ret);
	return 0;
}

斐波那契数列 1 1 2 4 7 13....第n个数=（n-1）+(n-2）
int count = 0;
int fei(int a)
{
	if (a == 3)
		count++;
	if (a <= 2)
	{
		return 1;
	}
	else
		return fei(a - 1) + fei(a - 2);
}
int fei1(int x)
{
	int a = 1;
	int b = 1;
	int c = 1;
	while (x> 2)
	{
		c = a + b;
		a = b;
		b = c;
		x--;
	}
	return c;
}
int main()
{
	int ret = 0;
	int i = 0;
	scanf("%d", &i);
	ret = fei1(i);
	printf("ret= %d\n", ret);
	return 0;
}
                                  汉诺塔问题//青蛙跳台阶
int main()
{
	int arr[10] = { 1,2,3 };
	char arr2[5] = { 'a','b' };
	char arr3[5] = "ab";
	char arr4[] = "adcdef";
	printf("%d\n", sizeof(arr4));
	printf("%d\n", strlen(arr4));
	return 0
}
strlen --库函数需引用头文件；且只能针对字符串求长度

int main()
{
	char arr1[] = "abc";
	char arr2[] = { 'a','b','c' };
	printf("%d\n", sizeof(arr1));
	printf("%d\n", sizeof(arr2));
	printf("%d\n", strlen(arr1));
	printf("%d\n", strlen(arr2));
	return 0;
}
char bubble_sort(int arr[], int sz)//冒泡排序
{
	int i = 0;
	for (i = 0; i < sz-1 ; i++)
	{
		int flag = 1;
		int j = 0;
		for (j = 0; j < sz - 1 - i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int tmp = arr[j + 1];
				arr[j + 1] = arr[j];
				arr[j] = tmp;
				flag = 0;
			}
		}
		if (flag == 1)
		{
			break;
		}
	}
	return 0;
 }
int main()
{
	int i = 0;
	int arr[] = { 9,8,7,6,5,4,3,2,1 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	//对arr进行排序排成升序
	bubble_sort(arr, sz);
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
