int main()
{
	int a[5] = { 1,2,3,4,5 };
	int* ptr =(int *)(&a + 1);//&a 取出数组地址
	printf("%d,%d\n", *(a + 1), *(ptr - 1));
	return 0;
}



struct test
{
	int Num;
	char* pcName;
	short sDate;
	char cha[2];
	short sBa[4];
}* p;
 
int main()
{
	p = (struct test*)0x100000;
	printf("%p\n", p + 0x1);
	printf("%p\n", (unsigned long) p + 0x1);//整型加1就是直接加一
	printf("%p\n", (unsigned int*)p + 0x1);//一个无符号整型指针 大小为4个字节
}

int main()
{
	int a[4] = { 1,2,3,4 };//存储形式 01 00 00 00 02 00 00 00..... 04 00 00 00
	int* ptr1 = (int*)(&a + 1);
	int* ptr2 = (int*)((int)a + 1);
	printf("%x,%x", ptr1[-1], *ptr2);
	return 0;
}



int main()
{
	int a[3][2] = { (0,1),(2,3),(4,5) };//逗号表达式 以逗号后面为真实填充值
	int* p;
	p = a[0];
	printf("%d\n", p[0]);//1
	return 0;
}

int main()
{
	int a[5][5];
	int(*p)[4];//p数组个数 一行四个
	p = a;
	printf("%p,%d\n", &p[4][2] - &a[4][2], &p[4][2] - &a[4][2]);//-4,-4
	return 0;
}

int main()
{
	char* a[] = { "work","at","alibaba" };
	char** pa = a;//pa指向的是a的第一个元素首地址
	pa++;
	printf("%s\n", *pa);
	return 0;
}

int main()
{
	char* c[] = { "ENTER","NEW","POINT","FIRST" };
	char** cp[] = { c + 3,c + 2,c + 1,c };
	char*** cpp = cp;
	printf("&s\n", **++cpp);//point
	printf("%s\n", *-- * ++cpp + 3);//ER
	printf("%s\n", *cpp[-2] + 3);//
	printf("%\n", cpp[-1][-1] + 1);
	return 0;
}

int main()
{
	unsigned long pulArray[] = { 6,7,8,9,10 };
	unsigned long* pulPtr;
	pulPtr = pulArray;
	*(pulPtr + 3) += 3;
	printf("%d,%d\n", *pulPtr, *(pulPtr + 3));
	return 0;
}

#include<math.h>
int main()
{
	int i = 0;
	for (i = 0; i <= 100000; i++)
	{
		int sum = 0;
		int n = 1;//判断i是否为水仙花数(自幂数)
		int tmp = i;//计算i的位数-n位数
		while (tmp /= 10)
		{
			n++;
		}
		tmp = i;
		while (tmp)
		{
			sum += pow(tmp % 10, n);
			tmp /= 10;
		}
		if (sum == i)
		{
			printf("%d ",i);
		}
	}
	return 0;
}

int main()
{
	int line = 0;
	int i = 0;
	scanf("%d", &line);
	for (i = 0; i < line; i++)
	{
		int j = 0;
		for (j = 0; j<line-1-i; j++ )
		{
			printf(" ");
		}
		for (j = 0; j < 2*i+1; j++)
		{
			printf("*");
		}
		printf("\n");
	}
	for (i = 0; i < line - 1; i++)
	{
		int j = 0;
		for (j = 0; j < i+1 ; j++)
		{
			printf(" ");
		}
		for (j = 0; j < 2*(line-i-1)-1; j++)
		{
			printf("*");
		}
		printf("\n");
	}
	return 0;
}
