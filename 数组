int main()
{
	const char arr[] = "adcd";//"adcd是常量字符串 不可修改
	char* pc = arr;
	//*pc = 'w';
	printf("%s\n", arr);
	printf("%s\n", pc);
	printf("%p\n", &pc);
	printf("%c\n", *pc);
	return 0;
}

int main()
{
	char arr1[] = "abcdef";
	char arr2[] = "abcdef";//两份相同的常量字符串都不可修改 所以两份常量字符串用一个地址
	char* p1 = "abcde";
	char *p2 = "abcde";


	if (arr1 == arr2)//arr1 和arr2 表示的是地址 所以比较的也是地址
	{
		printf("hehe\n");
	}
	else
	{
		printf("haha\n");
	}
	if (p1 ==p2)
		printf("%d\n", 1);
	return 0;
}

int main()
{
	int a = 10;
	int b = 20;
	int c = 30;
	int d = 40;
	int* arr[4] = { &a,&b,&c,&d };
	int i = 0;
	for (i = 0; i < 4; i++)
	{
		printf("%d ", *(arr[i]));
	}
	return 0;
}

int main()
{
	int arr1[]={ 1,2,3,4,5 };
	int arr2[] = { 2,3,4,5,6 };
	int arr3[] = { 3,4,5,6,7 };
	int* parr[] = { arr1,arr2,arr3 };
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		int j = 0;
		for (j = 0; j < 5; j++)
		{
			printf("%d ", *(parr[i] + j));
		}
		printf("\n");
	}
	return 0;
}

int main()
{
	int* p = null;
	char* pc = null;//字符指针or 数组指针 指向\存放数组或指针的地址 
	int arr[10] = { 0 };
	//&arr[0]-数组的地址
	//&arr-首元素的地址
	//arr-首元素的地址
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int(*p)[10] = &arr;//数组指针
	return 0;
}
int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int(*pa)[10] = &arr;
	int* p = arr;
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		printf("%d ", *(p + i));
		//printf("%d ", *(*pa + i));
		//printf("%d ", (*pa)[i]);
	}
	return 0;
}
void test(int arr[3][5])
{

}
int main()
{
	int arr[3][5] = { 0 };
	test(arr);
	return 0;
}

函数指针
int add(int x, int y)
{
	int z = 0;
	z = x + y;
	return z;
}
int main()
{
	int a = 10;
	int b = 20;
	printf("%p\n", &add);
	printf("%p\n", add);//&函数名 和函数名 都是函数的地址
	int (*pa)(int, int) = add;
	printf("%d\n", (pa)(2, 3));
	printf("%d\n", (*pa)(2, 3));
	printf("%d\n",  add(2, 3));
	printf("%d\n",  pa(2, 3));
	return 0;
}
void print(char *str)
{
	printf("%s\n", str);
}
int main()
{
	print("hello bit");
	 void (*p)(char*) = print;
	 (*p)("hello bit");
	return 0;
}
int add(int x, int y)
{
 	int z = x + y;
	return z;
}
int sub(int x, int y)
{
	int z = x - y;
	return z;
}
int mul(int x, int y)
{
	int z = x * y;
	return z;
}
int div(int x, int y)
{
	int z = x / y;
	return z;
}
int main()
{
	//指针数组
	int (*pa)(int, int) = add;
	//函数指针数组
	int(*parr[4])(int, int) = { add,sub,mul,div };
	int i = 0;
	for (i = 0; i < 4; i++)
	{
		printf("%d\n", parr[i](2, 3));
	}
	return 0;
}

char* my_strcpy(char* dest, const char* src)
{

}
int main()
{
	char(*pf)(char*, const char*) ;
	char* (*pfarr[4])(char, const char) ;
}

int add(int x, int y)
{
	int z = x + y;
	return z;
}
int sub(int x, int y)
{
	int z = x - y;
	return z;
}
int mul(int x, int y)
{
	int z = x * y;
	return z;
}
int div(int x, int y)
{
	int z = x / y;
	return z;
}
int xor (int x, int y)
{
	return x ^ y;
}
void menu()
{
	printf("*************************************\n");
	printf("******   1.add        2.sub    ******\n");
	printf("******   3.mul        4.div    ******\n");
	printf("******   5.xor        0.exit   ******\n");
	printf("*************************************\n");
}
int main()
{
	int x = 0;
	int y = 0;

	int (*parr[])(int, int) = { 0,add,sub,mul,div,xor };
	int input = 0;
	do
	{
		menu();
		printf("请选择:>");
		scanf("%d", &input);
		if (input >=1 && input <= 6)
		{
			printf("请输入:>\n");
			scanf("%d%d", &x, &y);
			printf("%d\n", parr[input](x, y));
		}
		else if (input == 0)
		{
			printf("退出\n");
			
		}
		else 
		{
			printf("输入错误，请重新输入");
		}
	} while (input);
		return 0;
}
void calc(int(*p)(int, int))
{
	int x = 0;
	int y = 0;
	printf("请输入两个操作数");
	scanf("%d%d", &x, &y);
  printf（“%d\n”， p（x， y））;// 回调函数
}
int main()
{
	
	int input = 0;
	do
	{
		menu();
		printf("请选择:>");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			calc(add);
			break;
		case 2:
			calc(sub);
			break;
		case 3:
			calc(mul);
			break;
		case 4:
			calc(div);
			break;
		case 5:
			calc(xor);
			break;
		default:
			printf("输入错误，请重新输入");
		case 0:
			printf("退出");
			break;
		}
	} while (input);
		return 0;
}

int main()
{
	int arr[10] = { 0 };
	int(*p)[10] = &arr;
	int(*pf)(int, int);
	int(*pfarr[4])(int, int);
	int(*(*ppfarr)[4])(int, int) = &pfarr;
	//ppfarr是一个数组指针，指针指向的数组有4个元素
	//指向的数组的每个元素的类型是一个函数指针int(*)(int,int)
}

void print(char* str)
{
	printf("hehe:%s", str);
}
void test(void (*p)(char* str))
{
	printf("test\n");
	p("bit");
}
int main()
{
	test(print);
	return 0;
}
void bubblesort(int arr[])
{
	///qsort
}
int main()
{
	int arr[] = { 1,3,5,7,9,2,4,6,8,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubblesort(arr, sz);
	return 0;
}
